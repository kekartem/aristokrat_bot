#!venv/bin/python
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import ChatNotFound, BotBlocked
from aiogram.utils.executor import start_webhook
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher
import json
import os
from helpers import *

TOKEN = '6223445527:AAHw0hgZ_lOV088aHVgBkikSLYhnIRAh1bo'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class HandleClient(StatesGroup):
    # waiting_for_action = State()
    waiting_for_module = State()
    waiting_for_color = State()
    waiting_for_foundation = State()
    waiting_for_table = State()
    waiting_for_area = State()
    waiting_for_name = State()


async def start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('üîß –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', callback_data='action1'), types.InlineKeyboardButton('‚ô®Ô∏è –ü—Ä–∏–º–µ—Ä—ã', callback_data='action2'), types.InlineKeyboardButton('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='action3'))
    await message.answer('–ë–∏—á —è –º–æ–ª–æ–¥–æ–π –ê—Ä–∏—Å—Ç–∫—Ä–∞—Ç—ä. –ú–µ–Ω—è –∑–æ–≤—É—Ç –±–æ—Ç –î–∂–∞–º–∞–ª. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                 reply_markup=keyboard)



@dp.callback_query_handler(lambda c: c.data == 'action1')
async def start_constructor(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await state.update_data(modules=[])
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [["–ú–∞–Ω–≥–∞–ª", "–¢–∞–Ω–¥—ã—Ä"], ["–ö–∞–∑–∞–Ω", "–ú–æ–π–∫–∞"], ["–†–∞–±–æ—á–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å"], ["–†—É—Å—Å–∫–∞—è –ø–µ—á—å"], ["–ú–æ–¥—É–ª—å –¥–ª—è –∫–æ–ø—á–µ–Ω–∏—è"], ["–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥"]]
    for row in buttons:
        keyboard.add(*row)
    await bot.send_message(callback_query.from_user.id, '–°–µ–π—á–∞—Å –ø–æ—Å—Ç—Ä–æ–∏–º –∫–ª–∞—Å—Å–Ω—É—é –±–∞—Ä–±–µ–∫—é-–∑–æ–Ω—É. –î–ª—è –Ω–∞—á–∞–ª–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∏–º:',
                                 reply_markup=keyboard)
    await HandleClient.waiting_for_module.set()


@dp.callback_query_handler(lambda c: c.data == 'action2')
async def show_reference(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–¢—É—Ç –±—É–¥—É—Ç –ø—Ä–∏–º–µ—Ä—ã –±–∞—Ä–±–µ–∫—é-–∑–æ–Ω')


@dp.callback_query_handler(lambda c: c.data == 'action3')
async def show_reference(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–¢—É—Ç –±—É–¥—É—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã')


async def on_module(message: types.Message, state: FSMContext):
    module = message.text
    if module == '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [["RED (–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π)"], ["RED (—Ä–∞–¥–∏–∞–ª—å–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π)"]]
        for row in buttons:
            keyboard.add(*row)
        await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∫–∏—Ä–ø–∏—á–∞.',
                                 reply_markup=keyboard)
        
        media = types.MediaGroup()
        media.attach_photo(types.InputFile('temp.png'), 'aaa')
        media.attach_photo(types.InputFile('temp.png'), 'bbb')
        media.attach_photo(types.InputFile('temp.png'), 'ccc')
        await bot.send_media_group(message.chat.id, media=media)
        await HandleClient.waiting_for_color.set()
    else:
        modules = await state.get_data()
        modules = modules.get('modules')
        modules.append(message.text)
        await state.update_data(modules=modules)
        await message.answer(f'‚úÖ {module}')
        print(modules)


async def on_color(message: types.Message, state: FSMContext):
    await state.update_data(color=message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [['–î–∞', '–ù–µ—Ç'], ['–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç?']]
    for row in buttons:
        keyboard.add(*row)
    await message.answer('–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —É –≤–∞—Å –≥–æ—Ç–æ–≤ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç?',
                                 reply_markup=keyboard)
    await HandleClient.waiting_for_foundation.set()


async def on_foundation(message: types.Message, state: FSMContext):
    if message.text == '–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç?':
        await message.answer('–¢–µ–∫—Å—Ç –æ —Ç–æ–º, —á—Ç–æ —Ç–∞–∫–æ–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç')
    elif message.text == '–î–∞':
        await message.answer('–û—Ç–ª–∏—á–Ω–æ! –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å –∑–æ–Ω—ã-–±–∞—Ä–±–µ–∫—é –∏–∑ –∫–∏—Ä–ø–∏—á–∞ - 1000–∫–≥.')
    elif message.text == '–ù–µ—Ç':
        await message.answer('–•–æ—Ä–æ—à–æ. –ò–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –±–∞—Ä–±–µ–∫—é-–∑–æ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—ã–¥–µ—Ä–∂–∏–≤–∞–ª–æ –µ–µ –≤–µ—Å. –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å –±–∞—Ä–±–µ–∫—é- –∑–æ–Ω –∏–∑ –∫–∏—Ä–ø–∏—á–∞ - –æ–∫–æ–ª–æ 1000–∫–≥. –ú—ã, –∫–∞–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å, —Å–æ–≤–µ—Ç—É–µ–º –∑–∞–ª–∏–≤–∞—Ç—å –±–µ—Ç–æ–Ω–Ω—É—é –ø–ª–∏—Ç—É, –Ω–æ –∏ —Å–≤–∞–π–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç —Ç–∞–∫–∂–µ —Ö–æ—Ä–æ—à–æ –ø–æ–¥–æ–π–¥–µ—Ç.')

    if message.text != '–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç?':
        await state.update_data(foundation=message.text)
        await message.answer('–î–∞–≤–∞–π—Ç–µ –Ω–∞ —á–∏—Å—Ç–æ—Ç—É: –ë–∞—Ä–±–µ–∫—é-–∑–æ–Ω–∞ —ç—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —Ä–æ—Å–∫–æ—à–∏. –ü–æ—ç—Ç–æ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –∫ —Å—Ç–æ–ª–µ—à–Ω–∏—Ü–∞–º –∏–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞–Ω–∏—Ç–∞. –ú—ã —Ç–∞–∫–∂–µ –¥–µ–ª–∞–µ–º –∏—Ö —Å–∞–º–∏ –∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –æ–Ω–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –≤–µ—Ä—Å–∏—è–º —Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –∫–∏—Ä–ø–∏—á–Ω–æ–π —Å—Ç–æ–ª–µ—à–Ω–∏—Ü–µ–π. \n –î–∞–≤–∞–π—Ç–µ –Ω–∞ —á–∏—Å—Ç–æ—Ç—É: –ë–∞—Ä–±–µ–∫—é-–∑–æ–Ω–∞ —ç—Ç–æ –ø—Ä–µ–¥–º–µ—Ç —Ä–æ—Å–∫–æ—à–∏. –ü–æ—ç—Ç–æ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –∫ —Å—Ç–æ–ª–µ—à–Ω–∏—Ü–∞–º –∏–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞–Ω–∏—Ç–∞. –ú—ã —Ç–∞–∫–∂–µ –¥–µ–ª–∞–µ–º –∏—Ö —Å–∞–º–∏ –∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –æ–Ω–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –≤–µ—Ä—Å–∏—è–º —Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –∫–∏—Ä–ø–∏—á–Ω–æ–π —Å—Ç–æ–ª–µ—à–Ω–∏—Ü–µ–π.')
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [['–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç–æ–ª–µ—à–Ω–∏—Ü–∞?'], ['–ò–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–Ω–∏—Ç–∞'], ['–ò–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞–Ω–∏—Ç–∞'], ['–ù–µ –¥–µ–ª–∞–µ–º']]
        for row in buttons:
            keyboard.add(*row)
        await message.answer('–î–µ–ª–∞–µ–º –ª–∏ –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞ –∫–∏—Ä–ø–∏—á–Ω—É—é —Å—Ç–æ–ª–µ—à–Ω–∏—Ü—É?', reply_markup=keyboard)
        await HandleClient.waiting_for_table.set()


async def on_table(message: types.Message, state: FSMContext):
    if message.text == '–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç–æ–ª–µ—à–Ω–∏—Ü–∞?':
        await message.answer('–¢—É—Ç —Ñ–æ—Ç–∫–∏ —Å—Ç–æ–ª–µ—à–Ω–∏—Ü')
        # media = types.MediaGroup()
        # media.attach_photo(types.InputFile('media/Starbucks_Logo.jpg'), '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è')
        # media.attach_photo(types.InputFile('media/Starbucks_Logo_2.jpg'), '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 2')
        # await bot.send_media_group(call.message.chat.id, media=media)
    else:
        await state.update_data(table=message.text)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [['–ú–æ—Å–∫–≤–∞ –∏ –ú–û'], ['–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –õ–û']]
        for row in buttons:
            keyboard.add(*row)
        await message.answer('–ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –±–∞—Ä–±–µ–∫—é-–∑–æ–Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ? –ï—Å–ª–∏ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏—Å–æ–Ω–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –≤ —á–∞—Ç.', reply_markup=keyboard)
        await HandleClient.waiting_for_area.set()


async def on_area(message: types.Message, state: FSMContext):
    await state.update_data(area=message.text)
    await message.answer('–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')
    await HandleClient.waiting_for_name.set()


async def on_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton('üîß –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', callback_data='action1'), types.InlineKeyboardButton('‚ô®Ô∏è –ü—Ä–∏–º–µ—Ä—ã', callback_data='action2'), types.InlineKeyboardButton('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='action3'))
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã!\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ê –ø–æ–∫–∞ - –º–æ–∂–µ—Ç–µ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∞:',
                                 reply_markup=keyboard)
    user_data = await state.get_data()
    await message.answer(f"–ù–æ–≤–∞—è –∑—è–≤–∫–∞.\n–ò–º—è: {user_data.get('name')}\n–ú–æ–¥—É–ª–∏: {', '.join(user_data.get('modules'))}\n–¶–≤–µ—Ç: {user_data.get('color')}\n–ï—Å—Ç—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç: {user_data.get('foundation')}\n–°—Ç–æ–ª–µ—à–Ω–∏—Ü–∞: {user_data.get('table')}\n–†–µ–≥–∏–æ–Ω: {user_data.get('area')}")

    # managers = read_all_managers()
    # await state.finish()
    # for manager in managers:
    #     await bot.send_message(int(manager.manager_chat_id),
    #                            f"–ù–æ–≤–∞—è –∑—è–≤–∫–∞.\n–ò–º—è: {user_data.get('name')}\n–ú–æ–¥—É–ª–∏: {', '.join(user_data.get('modules'))}\n–¶–≤–µ—Ç: {user_data.get('color')}\n–ï—Å—Ç—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç: {user_data.get('foundation')}\n–°—Ç–æ–ª–µ—à–Ω–∏—Ü–∞: {user_data.get('table')}\n–†–µ–≥–∏–æ–Ω: {user_data.get('area')}")



async def admin(message: types.Message, state: FSMContext):
    password = message.text.split(' ')[1]
    if password == os.getenv('PASSWORD'):
        save_manager(str(message.chat.id))
        await message.answer('–¢–µ–ø–µ—Ä—å –≤ —ç—Ç–æ—Ç —á–∞—Ç –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤—Å–µ –∑–∞—è–≤–∫–∏.')
        await state.finish()
    else:
        await message.answer('–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π.')
    



def register_handlers_algo(dp: Dispatcher):
    dp.register_message_handler(start, commands="start", state="*")
    dp.register_message_handler(admin, commands="admin", state="*")
    dp.register_message_handler(on_module, state=HandleClient.waiting_for_module)
    dp.register_message_handler(on_color, state=HandleClient.waiting_for_color)
    dp.register_message_handler(on_foundation, state=HandleClient.waiting_for_foundation)
    dp.register_message_handler(on_table, state=HandleClient.waiting_for_table)
    dp.register_message_handler(on_area, state=HandleClient.waiting_for_area)
    dp.register_message_handler(on_name, state=HandleClient.waiting_for_name)


register_handlers_algo(dp)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)